{"ast":null,"code":"var _jsxFileName = \"/home/user/Documentos/Driven/Projetos/drivent-frontend/src/contexts/EventInfoContext.js\",\n  _s = $RefreshSig$();\nimport { createContext } from 'react';\nimport Splash from '../components/Splash';\nimport useEvent from '../hooks/api/useEvent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventInfoContext = /*#__PURE__*/createContext();\nexport default EventInfoContext;\nexport function EventInfoProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const {\n    event,\n    eventLoading,\n    eventError\n  } = useEvent();\n  if (eventLoading) {\n    return /*#__PURE__*/_jsxDEV(Splash, {\n      loading: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n  if (eventError) {\n    let message = eventError.response ? eventError.response.data.message : 'Could not connect to server. Please try again later.';\n    return /*#__PURE__*/_jsxDEV(Splash, {\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(EventInfoContext.Provider, {\n    value: {\n      eventInfo: event,\n      eventInfoError: eventError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(EventInfoProvider, \"US81ru3OGGOnGaWsGqThwH+ljsk=\", false, function () {\n  return [useEvent];\n});\n_c = EventInfoProvider;\nvar _c;\n$RefreshReg$(_c, \"EventInfoProvider\");","map":{"version":3,"names":["createContext","Splash","useEvent","EventInfoContext","EventInfoProvider","children","event","eventLoading","eventError","message","response","data","eventInfo","eventInfoError"],"sources":["/home/user/Documentos/Driven/Projetos/drivent-frontend/src/contexts/EventInfoContext.js"],"sourcesContent":["import { createContext } from 'react';\r\n\r\nimport Splash from '../components/Splash';\r\n\r\nimport useEvent from '../hooks/api/useEvent';\r\n\r\nconst EventInfoContext = createContext();\r\nexport default EventInfoContext;\r\n\r\nexport function EventInfoProvider({ children }) {\r\n  const { event, eventLoading, eventError } = useEvent();\r\n\r\n  if (eventLoading) {\r\n    return (\r\n      <Splash loading />\r\n    );\r\n  }\r\n\r\n  if (eventError) {\r\n    let message = eventError.response ? eventError.response.data.message : 'Could not connect to server. Please try again later.';\r\n    return (\r\n      <Splash message={message} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <EventInfoContext.Provider value={{ eventInfo: event, eventInfoError: eventError }}>\r\n      { children }\r\n    </EventInfoContext.Provider>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,OAAO;AAErC,OAAOC,MAAM,MAAM,sBAAsB;AAEzC,OAAOC,QAAQ,MAAM,uBAAuB;AAAC;AAE7C,MAAMC,gBAAgB,gBAAGH,aAAa,EAAE;AACxC,eAAeG,gBAAgB;AAE/B,OAAO,SAASC,iBAAiB,OAAe;EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC;EAC5C,MAAM;IAAEC,KAAK;IAAEC,YAAY;IAAEC;EAAW,CAAC,GAAGN,QAAQ,EAAE;EAEtD,IAAIK,YAAY,EAAE;IAChB,oBACE,QAAC,MAAM;MAAC,OAAO;IAAA;MAAA;MAAA;MAAA;IAAA,QAAG;EAEtB;EAEA,IAAIC,UAAU,EAAE;IACd,IAAIC,OAAO,GAAGD,UAAU,CAACE,QAAQ,GAAGF,UAAU,CAACE,QAAQ,CAACC,IAAI,CAACF,OAAO,GAAG,sDAAsD;IAC7H,oBACE,QAAC,MAAM;MAAC,OAAO,EAAEA;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAG;EAEhC;EAEA,oBACE,QAAC,gBAAgB,CAAC,QAAQ;IAAC,KAAK,EAAE;MAAEG,SAAS,EAAEN,KAAK;MAAEO,cAAc,EAAEL;IAAW,CAAE;IAAA,UAC/EH;EAAQ;IAAA;IAAA;IAAA;EAAA,QACgB;AAEhC;AAAC,GArBeD,iBAAiB;EAAA,QACaF,QAAQ;AAAA;AAAA,KADtCE,iBAAiB;AAAA;AAAA"},"metadata":{},"sourceType":"module"}